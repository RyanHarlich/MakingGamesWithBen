Updated Files:
	- ParticleBatch2D.cpp
	- ParticleBatch2D.h
	- MainGame.cpp

___________________________________________________________________________________
Notes:
	- Particles that do something unique, like fading out alpha component

	- Options:
			- Could change Particle2D into an interface
					- would take to much time
			- Could make a sub class of Particle
					- would lose cache coherency since using polymorphism since would have to store them as pointers
			- Function Pointers
					- scarey for people new to C++

	- Function Pointers (C++ 11): a pointer to a function

	#include <functional>

		syntax is return type and arguments in angle brackets (template arguments)
	std::function<void(const Particle2D&, float)>

		can have a default function
	void example(std::function<void(const Particle2D&, float)> func = defaultParticleUpdate);
		{ m_func = func; }

	defaultParticleUpdate function would have to match the signature of the function pointer
		- ALSO: it needs the key word inline in front if in the header file hanging outside class(es)
			inline void defaultFunction(const Particle2D& a, float b) { // does default stuff }





LAMBDAS


	- Lambdas: passes function pointer but does not need the function defined in the .cpp file
	defined: Inline declaration of a function

	syntex, in a argument it is:
				classVariable.function([](int a,float b){//implement what function does here });

		note: the lambdas must match the function pointer signature
			  including if the keyword const is used or not

		ex:

	m_bloodPaticleBatch->init(0,0,0, [](Bengine::Particle2D& particle, float deltaTime) {
		particle.position += particle.velocity * deltaTime;
		particle.color.a = (GLubyte)(particle.life * 255.0f);
	});




	the square brackets can be implemented

	[=]   pass local variable by value
	[&]   pass local variable by reference

	this allows for a local variable to be in side the block statement of the lambdas, although [&] this can be bad because when the function ends the variable is pointing to a stack variable which will no longer exist or an unallocated memory

	Important: it is [=] not [=a] or whatever the local variable is, do not need to declare variable only the choice of passing by value or by reference


	Probably will never be used
			
